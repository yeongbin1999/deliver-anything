name: Backend CD

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "infra/docker/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # -------------------------------------------------------------
    # üìå ÌôòÍ≤Ω Î≥ÄÏàò (Ïù¥ ÏÑπÏÖòÎßå ÏàòÏ†ïÌïòÏó¨ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎßûÍ≤å Ïû¨ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî) 
    # -------------------------------------------------------------
    env:
      APP_NAME: deliver-anything-backend
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/deliver-anything-backend
      DOCKERFILE_PATH: infra/docker/Dockerfile
      DOT_ENV: ${{ secrets.DOT_ENV }}

      # Î∞∞Ìè¨ ÌôòÍ≤Ω ÏÑ§Ï†ï
      EC2_TAG_NAME: team9-ec2
      
      # Blue-Green ÏÑ§Ï†ï
      BLUE_CONTAINER: backend-blue
      GREEN_CONTAINER: backend-green
      PORT_BLUE: 8081
      PORT_GREEN: 8082
      INTERNAL_PORT: 8080
      
      # Health Check ÏÑ§Ï†ï
      HEALTH_CHECK_PATH: /actuator/health
      HEALTH_TIMEOUT: 120                       # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏµúÎåÄ ÎåÄÍ∏∞ ÏãúÍ∞Ñ (Ï¥à)
      HEALTH_INTERVAL: 3                        # Ìó¨Ïä§ Ï≤¥ÌÅ¨ Í∞ÑÍ≤© (Ï¥à)
      INITIAL_DELAY: 20                         # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ ÌõÑ Ï¥àÍ∏∞ ÎåÄÍ∏∞ ÏãúÍ∞Ñ (Ï¥à)

      # Nginx Proxy Manager (NPM) ÏÑ§Ï†ï
      NPM_HOST: 127.0.0.1
      NPM_PORT: 81
      NPM_DOMAIN: ${{ secrets.NPM_DOMAIN }}     # NPM ÎèÑÎ©îÏù∏ (Secret ÌïÑÏöî)
      NPM_ID: ${{ secrets.NPM_ID }}             # NPM ÏÇ¨Ïö©Ïûê ID (Secret ÌïÑÏöî)
      NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }} # NPM ÎπÑÎ∞ÄÎ≤àÌò∏ (Secret ÌïÑÏöî)
    # -------------------------------------------------------------
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Git Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Tag Output
        id: set_tag_output
        run: echo "new_tag=${{ steps.create_tag.outputs.new_tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Generate .env
        run: mkdir -p backend && echo "$DOT_ENV" > backend/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Instance ID
        id: get_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ env.EC2_TAG_NAME }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "‚ùå No running EC2 instance found with tag ${{ env.EC2_TAG_NAME }}"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Deploy Container via SSM
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy ${{ steps.create_tag.outputs.new_tag }}
          command: |
            IMAGE=${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}

            BLUE_CONTAINER=${{ env.BLUE_CONTAINER }}
            GREEN_CONTAINER=${{ env.GREEN_CONTAINER }}
            PORT_BLUE=${{ env.PORT_BLUE }}
            PORT_GREEN=${{ env.PORT_GREEN }}
            INTERNAL_PORT=${{ env.INTERNAL_PORT }}
            HEALTH_CHECK_PATH=${{ env.HEALTH_CHECK_PATH }}
            HEALTH_TIMEOUT=${{ env.HEALTH_TIMEOUT }}
            HEALTH_INTERVAL=${{ env.HEALTH_INTERVAL }}
            INITIAL_DELAY=${{ env.INITIAL_DELAY }}
            NPM_HOST=${{ env.NPM_HOST }}
            NPM_PORT=${{ env.NPM_PORT }}
            NPM_DOMAIN=${{ env.NPM_DOMAIN }}
            NPM_ID="${{ env.NPM_ID }}"
            NPM_PASSWORD="${{ env.NPM_PASSWORD }}"

            # --- ÌòÑÏû¨ ÌôúÏÑ± Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏ ---
            if docker ps --filter "name=$BLUE_CONTAINER" | grep $BLUE_CONTAINER; then
                ACTIVE=blue
                INACTIVE=green
                PORT_ACTIVE=$PORT_BLUE
                PORT_INACTIVE=$PORT_GREEN
            elif docker ps --filter "name=$GREEN_CONTAINER" | grep $GREEN_CONTAINER; then
                ACTIVE=green
                INACTIVE=blue
                PORT_ACTIVE=$PORT_GREEN
                PORT_INACTIVE=$PORT_BLUE
            else
                ACTIVE=none
                INACTIVE=blue
                PORT_ACTIVE=
                PORT_INACTIVE=$PORT_BLUE
            fi

            NEW_CONTAINER=${INACTIVE_CONTAINER}

            # Í∏∞Ï°¥ INACTIVE Ïª®ÌÖåÏù¥ÎÑà Ï†úÍ±∞
            docker stop $NEW_CONTAINER || true
            docker rm $NEW_CONTAINER || true
            
            # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
            docker run -d --name $NEW_CONTAINER \
              --network common \
              -p $PORT_INACTIVE:$INTERNAL_PORT \
              $IMAGE

            # Ï¥àÍ∏∞ ÎîúÎ†àÏù¥
            sleep $INITIAL_DELAY

            # --- Ìó¨Ïä§Ï≤¥ÌÅ¨ ---
            echo "‚è± Waiting for $NEW_CONTAINER to become healthy..."
            HEALTH_OK=false
            ELAPSED=0

            until [ $ELAPSED -ge $HEALTH_TIMEOUT ]; do
              STATUS=$(docker exec $NEW_CONTAINER curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$INTERNAL_PORT$HEALTH_CHECK_PATH || echo 000)
              if [ "$STATUS" -eq 200 ]; then
                HEALTH_OK=true
                echo "‚úÖ $NEW_CONTAINER is healthy!"
                break
              fi
              sleep $HEALTH_INTERVAL
              ELAPSED=$((ELAPSED + HEALTH_INTERVAL))
            done

            if [ "$HEALTH_OK" = false ]; then
              echo "‚ùå $NEW_CONTAINER did not pass health check. Aborting deployment."
              docker stop $NEW_CONTAINER || true
              docker rm $NEW_CONTAINER || true
              exit 1
            fi

            # --- NPM ÌÜ†ÌÅ∞ Î∞úÍ∏â ---
            TOKEN=$(curl -s -X POST http://$NPM_HOST:$NPM_PORT/api/tokens \
              -H "Content-Type: application/json" \
              -d "{\"identity\": \"$NPM_ID\", \"secret\": \"$NPM_PASSWORD\"}" | jq -r '.token')

            # --- ÌîÑÎ°ùÏãú ID ÌôïÏù∏ ---
            PROXY_ID=$(curl -s -X GET "http://$NPM_HOST:$NPM_PORT/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer $TOKEN" \
              | jq ".[] | select(.domain_names[]==\"$NPM_DOMAIN\") | .id")

            # --- ÏóÖÏä§Ìä∏Î¶º Ï†ÑÌôò ---
            NEW_CONFIG=$(jq -n --arg host "$NEW_CONTAINER" --argjson port $INTERNAL_PORT '{forward_host: $host, forward_port: $port}')
            curl -s -X PUT "http://$NPM_HOST:$NPM_PORT/api/nginx/proxy-hosts/$PROXY_ID" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$NEW_CONFIG"

            # Ïù¥Ï†Ñ ACTIVE Ïª®ÌÖåÏù¥ÎÑà Ï†úÍ±∞
            if [ "$ACTIVE" != "none" ]; then
              docker stop backend-$ACTIVE || true
              docker rm backend-$ACTIVE || true
            fi

            echo "‚úÖ Blue-Green switch complete: $NEW_CONTAINER is now active."