spring:
  application:
    name: buddy-backend

  config:
    import: optional:file:.env   # .env 파일에서 환경변수 불러오기

  sql:
    init:
      mode: always

  jpa:
    defer-datasource-initialization: true
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        time_zone: UTC                      # UTC 시간대 설정 (서버와 DB 시간대 일치)
        format_sql: true                    # SQL 포맷팅해서 출력
        highlight_sql: true                 # SQL 색상 하이라이트
        use_sql_comments: true              # SQL에 주석 추가
        use-new-id-generator-mappings: true # 새로운 ID 생성 전략 사용
        default_batch_fetch_size: 50        # Lazy 로딩 시 Batch Fetch 최적화 (N+1 문제 완화)
        generate_statistics: true           # Hibernate 통계 출력 (캐시 히트율, 쿼리 횟수 등)

  datasource:
    url: jdbc:h2:./dev;MODE=MySQL        # H2 데이터베이스 (MySQL 호환 모드)
    driver-class-name: org.h2.Driver        # H2 드라이버
    username: sa                            # 기본 사용자
    password:                               # 비밀번호 없음

  jackson:
    serialization:
      fail-on-empty-beans: false  # 빈 객체 직렬화 시 에러 방지

  data:
    redis:
      host: localhost      # Redis 호스트
      port: 6379           # Redis 포트
      password:            # Redis 비밀번호 없음
      timeout: 6000ms      # 연결 타임아웃 (6초)

  elasticsearch:
    uris:
      - http://localhost:9200

springdoc:
  default-produces-media-type: application/json;charset=UTF-8   # API 응답 기본 Content-Type
  api-docs:
    enabled: true                       # API 문서(JSON) 활성화
  swagger-ui:
    enabled: true                       # Swagger UI 활성화
    path: /swagger-ui.html              # Swagger UI 접속 경로
  override-with-generic-response: false # Swagger 응답 기본 덮어쓰기 여부

logging:
  level:
    com.back: DEBUG                                     # 패키지 로그 레벨
    org.hibernate.SQL: DEBUG                            # SQL 로그 출력
    org.hibernate.orm.jdbc.bind: TRACE                  # SQL 바인딩 로그 (파라미터 값)
    org.hibernate.orm.jdbc.extract: TRACE               # SQL 결과 추출 로그
    org.springframework.transaction.interceptor: TRACE  # 트랜잭션 동작 로그

management:
  endpoints:
    web:
      exposure:
        include: "health"   # /actuator/health 만 노출
  endpoint:
    health:
      show-details: never   # Health 상세 정보 비공개

oauth2:
  google:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}
    token-uri: https://oauth2.googleapis.com/token
    user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
  kakao:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    token-uri: https://kauth.kakao.com/oauth/token
    user-info-uri: https://kapi.kakao.com/v2/user/me
  naver:
    client-id: ${NAVER_CLIENT_ID}
    client-secret: ${NAVER_CLIENT_SECRET}
    token-uri: https://nid.naver.com/oauth2.0/token
    user-info-uri: https://openapi.naver.com/v1/nid/me

toss:
  payments:
    secret-key: ${YOUR_TEST_SECRET_KEY:임시키}
    toss-url: https://api.tosspayments.com

kakao:
  api:
    key: ${KAKAO_API_KEY:임시키}

custom:
  jwt:
    secretKey: ${JWT_SECRET_KEY:abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789}
  accessToken:
    expirationSeconds: "#{60*20}"

gemini:
  api:
    key: ${GEMINI_API_KEY:임시키}
    url: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET_NAME:team9-public-bucket}
    region:
      static: ${AWS_S3_REGION:ap-northeast-2}